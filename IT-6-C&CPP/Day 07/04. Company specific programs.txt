
15. Problem Statement 

You are required to input the size of the matrix then the elements of matrix, then you have to divide the main matrix in two sub matrices (even and odd) in such a way that element at 0 index will be considered as even and element at 1st index will be considered as odd and so on. then you have sort the even and odd matrices in ascending order then print the sum of second largest number from both the matrices

Example

enter the size of array : 5
enter element at 0 index : 3
enter element at 1 index : 4
enter element at 2 index : 1
enter element at 3 index : 7
enter element at 4 index : 9
Sorted even array : 1 3 9
Sorted odd array : 4 7

7

#include <stdio.h>

int main() {
	int arr[100];
	int length, i, j, oddlen, evenlen, temp;
	int odd[50], even[50];
	printf("Enter the length of the array: ");
	scanf("%d", &length);

	for (i = 0; i < length; i++) {
    	printf("Enter element at index %d: ", i);
    	scanf("%d", &arr[i]);
	}

	if (length % 2 == 0) {
    	oddlen = length / 2;
    	evenlen = length / 2;
	} else {
    	oddlen = length / 2;
    	evenlen = (length / 2) + 1;
	}

	for (i = 0; i < length; i++) {
    	if (i % 2 == 0) {
        	even[i / 2] = arr[i];
    	} else {
        	odd[i / 2] = arr[i];
    	}
	}

	for (i = 0; i < evenlen - 1; i++) {
    	for (j = i + 1; j < evenlen; j++) {
        	if (even[i] > even[j]) {
            	temp = even[i];
            	even[i] = even[j];
            	even[j] = temp;
        	}
    	}
	}

	for (i = 0; i < oddlen - 1; i++) {
    	for (j = i + 1; j < oddlen; j++) {
        	if (odd[i] > odd[j]) {
            	temp = odd[i];
            	odd[i] = odd[j];
            	odd[j] = temp;
        	}
    	}
	}
	printf("\nSorted even array: ");
	for (i = 0; i < evenlen; i++) {
    	printf("%d ", even[i]);
	}
	printf("\n");
	printf("Sorted odd array: ");
	for (i = 0; i < oddlen; i++) {
    	printf("%d ", odd[i]);
	}
	printf("\n");

	printf("%d", even[evenlen - 2] + odd[oddlen - 2]);
    
	return 0;
}

-------------------------------

16. Instructions: You are required to write the code. You can click on compile and run anytime to check compilation/execution status. The code should be logically/syntactically correct.

Problem: Write a program in C to display the table of a number and print the sum of all the multiples in it.

Test Cases:

Test Case 1:
Input:
5
Expected Result Value:
5, 10, 15, 20, 25, 30, 35, 40, 45, 50
275

Test Case 2:
Input:
12
Expected Result Value:
12, 24, 36, 48, 60, 72, 84, 96, 108, 120
660

#include<stdio.h>
int main ()
{
  int n, i, value = 0, sum = 0;
  printf ("Enter the number for which you want to know the table : ");
  scanf ("%d", &n);
  for (i = 1; i <= 10; ++i)
    {
      value = n * i;
      printf ("%d ", value);
      sum = sum + value;
    }
  printf ("\nsum is %d", sum);
  return 0;
}

------------------------------------

17. Instructions: You are required to write the code. You can click on compile and run anytime to check compilation/execution status. The code should be logically/syntactically correct.

Question: Write a program in C such that it takes a lower limit and upper limit as inputs and print all the intermediate palindrome numbers.

Test Cases:

TestCase 1:
Input :
10 , 80
Expected Result:
11 , 22 , 33 , 44 , 55 , 66 , 77.

Test Case 2:
Input:
100,200
Expected Result:
101 , 111 , 121 , 131 , 141 , 151 , 161 , 171 , 181 , 191.

#include<stdio.h>
int main ()
{
    int i, n, reverse, d, f, l;
    printf ("enter the starting \n");
    scanf ("%d", &f);
    printf ("enter the ending\n");
    scanf ("%d", &l);
    for (i = f; i <= l; i++)
    {
        reverse = 0;
        n = i;
        while (n != 0)
	{
	        d = n % 10;
	        reverse = reverse * 10 + d;
	        n = n / 10;
	}
        if (i == reverse)
	        printf ("%d ", i);
    }
    return 0;
}

-------------------------

18. Instructions: You are required to write the code. You can click on compile & run anytime to check the compilation/ execution status of the program. The submitted code should be logically/syntactically correct and pass all the test cases.

Ques: The program is supposed to calculate the sum of  distance between three points from each other.

For
x1 = 1 y1 = 1
x2 = 2 y2 = 4
x3 = 3 y3 = 6

Distance is calculated as : sqrt(x2-x1)2 + (y2-y1)2

#include <iostream>
#include 
using namespace std;
int main()
{
	float x1, y1, x2, y2, x3, y3;
	cout << "Enter x1,y1: ";
	cin >> x1 >> y1;
	cout << "Enter x2,y2: ";
	cin >> x2 >> y2;
	cout << "Enter x3,y3: ";
	cin >> x3 >> y3;

	float firstDiff = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));
	float secondDiff = sqrt(pow(x3 - x2, 2) + pow(y3 - y2, 2));
	float thirdDiff = sqrt(pow(x3 - x1, 2) + pow(y3 - y1, 2));

	cout << firstDiff + secondDiff + thirdDiff;

	return 0;
}

---------------------------

19. Problem Statement :

You are given a function, void MaxInArray(int arr[], int length); The function accepts an integer array ‘arr’ of size ‘length’ as its argument. Implement the function to find the maximum element of the array and print the maximum element and its index to the standard output 

(STDOUT). The maximum element and its index should be printed in separate lines.

Note: 

Array index starts with 0 
Maximum element and its index should be separated by a line in the output 
Assume there is only 1 maximum element in the array 
Print exactly what is asked, do not print any additional greeting messages 
Example: 

Input: 

23 45 82 27 66 12 78 13 71 86 

Output: 

86 

9 

Explanation: 

86 is the maximum element of the array at index 9. 

#include <stdio.h>
#include <limits.h>

void MaxInArray (int arr[], int length)
{
  int max = INT_MIN, index = -1;
  for (int i = 0; i < length; i++)
    {
      if (arr[i] > max)
	{
	  max = arr[i];
	  index = i;
	}
    }
  printf ("%d\n%d\n", max, index);
}

int main ()
{
  int n;
  scanf ("%d", &n);
  int arr[n];
  for (int i = 0; i < n; i++)
    scanf ("%d", &arr[i]);
  MaxInArray (arr, n);
  return 0;
}

-------------------------------------

20. Problem Statement :
An Autobiographical Number is a number N such that the first digit of N represents the count of how many zeroes are there in N, the second digit represents the count of how many ones are there in N and so on.

You are given a function, def FindAutoCount(n):

The function accepts string “n” which is a number and checks whether the number is an autobiographical number or not. If it is, an integer is returned, i.e. the count of distinct numbers in ‘n’. If not, it returns 0.

Assumption:

The input string will not be longer than 10 characters.
Input string will consist of numeric characters.
Note:

If string is None return 0.

Example:

Input:

n: “1210”

Output:

3

Explanation:

0th position in the input contains the number of 0 present in input, i.e. 1, in 1st position the count of number of 1s in input i.e. 2, in 2nd position the count of 2s in input i.e. 1, and in 3rd position the count of 3s i.e. 0, so the number is an autobiographical number.

Now unique numbers in the input are 0, 1, 2, so the count of unique numbers is 3. So 3 is returned.

#include <stdio.h>
#include <string.h>

int FindAutoCount (char n[])
{
  int sum = 0;
  int length = strlen (n);
  int uniqueDigits[10] = { 0 };

  for (int i = 0; i < length; i++)
    {
      sum += (n[i] - '0');
      uniqueDigits[n[i] - '0'] = 1;
    }

  if (sum != length)
    return 0;

  int count = 0;
  for (int i = 0; i < 10; i++)
    {
      if (uniqueDigits[i] == 1)
	count++;
    }

  return count;
}

int main ()
{
  char n[100];
  scanf ("%s", n);
  printf ("%d", FindAutoCount (n));
  return 0;
}

----------------------------------------
